
// Tic Tac Toe - Assignment 7 (Apr.2.2025)
import java.util.InputMismatchException;
import java.util.Scanner;

public class TicTacToe {
    private static char[][] grid = new char[3][3];
    private static char currentPlayer = 'X';

    public static void main(String[] args) throws Exception {
        Scanner keyboard = new Scanner(System.in);

        System.out.println("Welcome to Tic Tac Toe!\n");
        System.out.println("To play, enter the row and column number (e.g., 1 2).\n");

        initializeGrid(grid);

        while (true) {
            printGrid(grid);
            playerMove(currentPlayer, keyboard); // player's move

            // Check if the player won
            if (checkWin()) {
                printGrid(grid); // Print final board
                System.out.println("Player " + currentPlayer + " wins!");
                break;
            } else if (checkDraw()) { // Check for draw
                printGrid(grid); // Print final board
                System.out.println("It's a draw!");
                break;
            }
            switchPlayer(); // Switch turns
        }
        keyboard.close();
    }

    public static void initializeGrid(char[][] grid) {
        for (int row = 0; row < grid.length; row++) {
            for (int col = 0; col < grid[row].length; col++) {
                grid[row][col] = '-'; // Fill the grid with '-'
            }
        }
    }

    public static void printGrid(char[][] grid) {
        System.out.println("  1 2 3"); // Column labels
        for (int row = 0; row < grid.length; row++) {
            System.out.print((row + 1) + " "); // Row label
            for (int col = 0; col < grid[row].length; col++) {
                System.out.print(grid[row][col] + " "); // Print the grid cell with spaces
            }
            System.out.println(); // Move to the next row
        }
    }

    public static void switchPlayer() {
        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
    }

    public static void playerMove(char currentPlayer, Scanner keyboard) {
        int row, col;

        while (true) {
            try {
                System.out.print("Player " + currentPlayer + ", enter your move (row and column): ");
                row = keyboard.nextInt() - 1; // Subtract 1 to convert to binary
                col = keyboard.nextInt() - 1; // Subtract 1 to convert to binary

                // Validate the move
                if (row >= 0 && row < 3 && col >= 0 && col < 3 && grid[row][col] == '-') {
                    grid[row][col] = currentPlayer; // Place the player's move
                    break; // Exit the loop on valid input
                } else {
                    System.out.println("Invalid move. Please try again.");
                }
            } catch (InputMismatchException exception) {
                System.out.println("Error:Invalid move. Please enter two integers separated by a space.");
                keyboard.nextLine(); // Clear invalid input
            } catch (ArrayIndexOutOfBoundsException exception) {
                System.out.println("Error: Invalid move. Please enter an integer between 1-3.");
                keyboard.nextLine();
            } finally {
            }
        }
    }

    public static boolean checkWin() {
        // check row wins
        for (int row = 0; row < 3; row++) {
            if (grid[row][0] == currentPlayer && grid[row][1] == currentPlayer && grid[row][2] == currentPlayer) {
                return true;
            }
        }
        // check column wins
        for (int col = 0; col < 3; col++) {
            if (grid[0][col] == currentPlayer && grid[1][col] == currentPlayer && grid[2][col] == currentPlayer) {
                return true;
            }
        }
        // check digonal wins
        if ((grid[0][0] == currentPlayer && grid[1][1] == currentPlayer && grid[2][2] == currentPlayer) ||
                (grid[0][2] == currentPlayer && grid[1][1] == currentPlayer && grid[2][0] == currentPlayer)) {
            return true;
        }
        return false;
    }

    public static boolean checkDraw() {
        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 3; col++) {
                if (grid[row][col] == '-') {
                    return false; // If any cell is empty, it's not a draw
                }
            }
        }
        return true; // No empty cells mean it's a draw
    }
}
