// Tic Tac Toe - Assignment 7 (Apr.2.2025)
import java.util.Scanner;
import java.util.InputMismatchException;

public class TicTacToe {
    private static char[][] grid = new char[3][3];
    private static char currentPlayer = 'X';

    public static void initializeGrid(char[][] grid) {
        for (int row = 0; row < grid.length; row++) {
            for (int col = 0; col < grid[row].length; col++) {
                grid[row][col] = '-'; // fill grid with '-'
            }
        }
    }

    public static void printGrid(char[][] grid) {
        System.out.println("  1 2 3"); // column label
        for (int row = 0; row < grid.length; row++) {
            System.out.print((row + 1) + " "); // row label
            for (int col = 0; col < grid[row].length; col++) {
                System.out.print(grid[row][col] + " "); // print grid with space
            }
            System.out.println(); // move to next
        }
    }

    public static void switchPlayer() {
        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
    }

    public static void playerMove(int row, int col) {
        grid[row][col] = currentPlayer; // put player move
    }

    public static boolean checkWin() {
        // check row wins
        for (int row = 0; row < 3; row++) {
            if (grid[row][0] == currentPlayer && grid[row][1] == currentPlayer && grid[row][2] == currentPlayer) {
                return true;
            }
        }
        // check column wins
        for (int col = 0; col < 3; col++) {
            if (grid[0][col] == currentPlayer && grid[1][col] == currentPlayer && grid[2][col] == currentPlayer) {
                return true;
            }
        }
        // check digonal wins
        if ((grid[0][0] == currentPlayer && grid[1][1] == currentPlayer && grid[2][2] == currentPlayer) ||
                (grid[0][2] == currentPlayer && grid[1][1] == currentPlayer && grid[2][0] == currentPlayer)) {
            return true;
        }
        return false;
    }

    public static boolean checkDraw() {
        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 3; col++) {
                if (grid[row][col] == '-') {
                    return false; // if any cell is empty, it's not a draw
                }
            }
        }
        return true; // no empty cells mean it's a draw
    }

    public static void main(String[] args) throws Exception {
        Scanner keyboard = new Scanner(System.in);

        System.out.println("Welcome to Tic Tac Toe!\n");
        System.out.println("To play, enter the row and column number separated by a space (e.g., 1 2).\n");

        initializeGrid(grid);

        while (true) {
            printGrid(grid);

            while (true) {
                try {
                    System.out.print("Player " + currentPlayer + ", enter your move (row and column): ");
                    String input = keyboard.nextLine(); // take input as one line
                    String[] parts = input.split(" "); // split input by spaces

                    // convert from integer to binary
                    int row = Integer.parseInt(parts[0]) - 1;
                    int col = Integer.parseInt(parts[1]) - 1;

                    if (grid[row][col] == '-') {
                        playerMove(row, col); // call playerMove
                        break;
                    } else {
                        System.out.println("Invalid move. Please make sure the cell is empty.");
                        continue;
                    }
                } catch (InputMismatchException exception) {
                    System.out.println("Invalid input. Please enter two integers separated by a space BETWEEN 1-3.\n");
                    continue;
                } catch (ArrayIndexOutOfBoundsException exception) {
                    System.out.println("Invalid input. Please enter two integers separated by a space BETWEEN 1-3.\n");
                    continue;
                } catch (NumberFormatException exception) {
                    System.out.println("Invalid input. Please ONLY enter numbers.\n");
                    continue;
                }
            }
            // check if anyone win
            if (checkWin()) {
                printGrid(grid);
                System.out.println("Player " + currentPlayer + " wins!");
                break;
            } else if (checkDraw()) {
                printGrid(grid);
                System.out.println("It's a draw!");
                break;
            }
            switchPlayer();
        }
        keyboard.close();
    }
}
