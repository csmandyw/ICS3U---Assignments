// Point - Assignment 9 (Apr.16.2025)

public class Point {

    private double x;
    private double y;

    public Point() {
        x = 0.0;
        y = 0.0;
    }

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    public double getX() {
        return x;
    }

    public double getY() {
        return y;
    }

    public void displayCoordinate() {
        System.out.println("The x-coordinate is " + x);
        System.out.println("The y-coordinate is " + y);
    }

    public Point difference(Point point) {
        Point newPoint = new Point(this.x - point.getX(), this.y - point.getY());
        return newPoint;
    }

    public Point sum(Point point) {
        Point newPoint = new Point(this.x + point.getX(), this.y + point.getY());
        return newPoint;
    }

    public double distance(Point point) {
        double newPoint = Math.sqrt(Math.pow(this.x - point.getX(), 2) + Math.pow(this.y - point.getY(), 2));
        return newPoint;
    }

    public Point midpoint(Point point) {
        Point newPoint = new Point((this.x + point.getX()) / 2, (this.y + point.getY()) / 2);
        return newPoint;
    }

    public double slope(Point point) {
        double slope = ((point.getY() - this.y) / (point.getX() - this.x));
        return slope;
    }

    public double yIntercept(Point point) {
        double yIntercept = point.getY() - slope(point) * point.getX();
        return yIntercept;
    }

    public void linearEquation(Point point) {
        double m = slope(point);
        double b = yIntercept(point);

        // Vertical lines (x-coordinates are equal)
        if (point.getX() == this.getX()) {
            System.out.println("x = " + this.getX());
        }
        // Horizontal lines (slope is 0)
        else if (m == 0) {
            System.out.println("y = " + this.getY());
        }
        // Otherwise, print the equation
        else {
            System.out.println("y = " + m + "x" + (b != 0 ? " + " + b : ""));
        }
    }
}
